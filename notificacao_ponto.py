import os
import win32com.client as win32
import pandas as pd
from datetime import datetime
from collections import defaultdict

# Caminhos
planilha_caminho = r"C:\Users\trank\Desktop\Pasta1.xlsx"
historico_path = r"historico_notificacoes.xlsx"

# Verifica se a planilha existe
print(f"Verificando se a planilha mensal existe: {planilha_caminho}")
if not os.path.exists(planilha_caminho):
    print("‚ùå ERRO: Planilha n√£o encontrada.")
    exit()

# L√™ os dados da planilha principal
df = pd.read_excel(planilha_caminho)

# Mostra as colunas dispon√≠veis para evitar futuros erros
print("üìä Colunas encontradas na planilha:", df.columns.tolist())

# L√™ o hist√≥rico ou cria um novo DataFrame se n√£o existir
if os.path.exists(historico_path):
    historico_df = pd.read_excel(historico_path)
else:
    historico_df = pd.DataFrame(columns=["Nome", "Email", "Data"])

# Agrupa as datas esquecidas por funcion√°rio
funcionarios = defaultdict(list)

for _, row in df.iterrows():
    nome = row['Nome']
    email = row['Email']
    data = row['Data']
    funcionarios[(nome.strip().lower(), email.strip().lower())].append(str(data))

# Conecta ao Outlook
outlook = win32.Dispatch("Outlook.Application")
namespace = outlook.GetNamespace("MAPI")

# Lista as contas dispon√≠veis
print("üì¨ Contas dispon√≠veis no Outlook:")
for i in range(namespace.Accounts.Count):
    conta = namespace.Accounts.Item(i + 1)
    print(f"- {conta.DisplayName} | {conta.SmtpAddress}")

# Define o e-mail de envio
email_envio = "fisioap@outlook.com.br"
conta_encontrada = None

for i in range(namespace.Accounts.Count):
    conta = namespace.Accounts.Item(i + 1)
    if conta.SmtpAddress.lower() == email_envio.lower():
        conta_encontrada = conta
        break

if not conta_encontrada:
    print(f"‚ùå ERRO: Conta de e-mail '{email_envio}' n√£o encontrada no Outlook.")
    exit()

print("üìß Conex√£o com o Outlook estabelecida com sucesso!")

# Envia os e-mails
for (nome, email), datas in funcionarios.items():
    # Verifica hist√≥rico
    historico = historico_df[(historico_df['Email'].str.lower() == email)]
    notificacoes_anteriores = historico.shape[0]
    notificacao_atual = notificacoes_anteriores + 1

    print(f"DEBUG: Nome: {nome} | Email: {email} | Notifica√ß√µes Anteriores: [{notificacoes_anteriores}] | Notifica√ß√£o Atual: {notificacao_atual}")

    # Gera assunto com n√∫mero ordinal
    ordinais = {1: "1¬™", 2: "2¬™", 3: "3¬™", 4: "4¬™", 5: "5¬™", 6: "6¬™", 7: "7¬™", 8: "8¬™", 9: "9¬™", 10: "10¬™"}
    prefixo = ordinais.get(notificacao_atual, f"{notificacao_atual}¬™")
    assunto = f"{prefixo} Notifica√ß√£o de Esquecimento"
    print(f"DEBUG: Assunto do e-mail antes do envio -> {assunto}")

    corpo = f"""
Ol√° {nome.title()},

Identificamos que voc√™ esqueceu de registrar o ponto nas seguintes datas:

{chr(10).join(f"- {d}" for d in datas)}

Essa √© sua {prefixo.lower()} notifica√ß√£o sobre esse tipo de ocorr√™ncia. Por favor, redobre a aten√ß√£o para evitar impactos no controle de frequ√™ncia.

Atenciosamente,
Recursos Humanos
"""

    # Cria o e-mail
    mail = outlook.CreateItem(0)
    mail.To = email
    mail.Subject = assunto
    mail.Body = corpo
    mail._oleobj_.Invoke(*(64209, 0, 8, 0, conta_encontrada))  # Define a conta de envio

    try:
        mail.Send()
        print(f"‚úÖ Conta de envio definida como: {conta_encontrada.SmtpAddress}")
        print(f"‚úÖ E-mail enviado para {email}")

        # Atualiza hist√≥rico
        for d in datas:
            historico_df = pd.concat([historico_df, pd.DataFrame([{'Nome': nome, 'Email': email, 'Data': d}])], ignore_index=True)

    except Exception as e:
        print(f"‚ùå ERRO ao enviar e-mail para {email}: {e}")

# Salva o hist√≥rico
historico_df.to_excel(historico_path, index=False)
print("‚úÖ Notifica√ß√µes enviadas e hist√≥rico atualizado!")
