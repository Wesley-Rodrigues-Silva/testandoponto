import pandas as pd
import win32com.client
import os

# üöÄ Mensagem de depura√ß√£o para garantir que o c√≥digo atualizado est√° rodando
print("\nüöÄ ESTE √â O C√ìDIGO ATUALIZADO RODANDO! üöÄ\n")

# üõ† Caminhos corretos para os arquivos
planilha_mensal = r"C:\Users\trank\Desktop\Pasta1.xlsx"
historico_notificacoes = r"C:\Users\trank\Desktop\historico.xlsx"

# üìå Depura√ß√£o: Exibir os caminhos usados
print("Executando o script...")
print(f"Verificando se a planilha mensal existe: {planilha_mensal}")

# üîç Verificar se o arquivo da planilha existe
if not os.path.exists(planilha_mensal):
    print(f"‚ùå ERRO: Arquivo {planilha_mensal} n√£o encontrado!")
    exit()

# üîç Verificar se o hist√≥rico de notifica√ß√µes existe
if os.path.exists(historico_notificacoes):
    historico_df = pd.read_excel(historico_notificacoes, engine="openpyxl")
else:
    historico_df = pd.DataFrame(columns=["Nome", "Email", "Notificacoes", "Ultimas Datas"])

# üì• Carregar os dados da planilha mensal
mensal_df = pd.read_excel(planilha_mensal, engine="openpyxl")

# üìå Converter datas para o formato brasileiro (se a coluna existir)
if "Data" in mensal_df.columns:
    mensal_df["Data"] = pd.to_datetime(mensal_df["Data"], errors='coerce').dt.strftime('%d/%m/%Y')
else:
    print("‚ùå ERRO: A coluna 'Data' n√£o foi encontrada na planilha.")
    exit()

# üìå Criar um dicion√°rio para armazenar notifica√ß√µes
notificacoes = {}
for _, row in mensal_df.iterrows():
    nome, email, data = row["Nome"], row["Email"], row["Data"]
    if email in notificacoes:
        notificacoes[email]["datas"].append(data)
    else:
        notificacoes[email] = {"nome": nome, "datas": [data]}

# üìß Inicializar o Outlook para envio de e-mails
try:
    outlook = win32com.client.Dispatch("Outlook.Application")
    print("üìß Conex√£o com o Outlook estabelecida com sucesso!")
except Exception as e:
    print(f"‚ùå ERRO ao conectar ao Outlook: {e}")
    exit()

# üìå Selecionar a conta espec√≠fica para envio
conta = None
email_envio = "fisioap@outlook.com.br"  # Altere para o e-mail correto

for acc in outlook.Session.Accounts:
    if acc.SmtpAddress.lower() == email_envio.lower():
        conta = acc
        break

if not conta:
    print(f"‚ùå ERRO: Conta de e-mail '{email_envio}' n√£o encontrada no Outlook.")
    exit()

# üì§ Iterar sobre os funcion√°rios a serem notificados
for email, info in notificacoes.items():
    nome = info["nome"]
    datas = info["datas"]
    
    # üìå Verificar quantas notifica√ß√µes o funcion√°rio j√° recebeu
    notificacoes_anteriores = historico_df.loc[historico_df["Email"] == email, "Notificacoes"].values
    num_notificacoes = int(notificacoes_anteriores[0]) + 1 if len(notificacoes_anteriores) > 0 else 1

    # üìå Mensagem de debug para verificar os valores antes do envio
    print(f"DEBUG: Nome: {nome} | Email: {email} | Notifica√ß√µes Anteriores: {notificacoes_anteriores} | Notifica√ß√£o Atual: {num_notificacoes}")

    # üìå Criar o corpo do e-mail
    texto_datas = f"voc√™ esqueceu de registrar seu ponto na seguinte data: {datas[0]}" if len(datas) == 1 \
        else f"voc√™ esqueceu de registrar seu ponto nas seguintes datas: {', '.join(datas)}"
    mensagem = (f"Prezado(a) {nome},\n\n"
                f"Identificamos que {texto_datas}.\n\n"
                "Atenciosamente,\nRecursos Humanos")

    # üìå Definir o assunto do e-mail corretamente
    assunto_email = f"{num_notificacoes}¬™ Notifica√ß√£o de Esquecimento"
    print(f"DEBUG: Assunto do e-mail antes do envio -> {assunto_email}")  # Verifica se o assunto est√° correto

    # üìß Criar e enviar o e-mail via Outlook
    try:
        mail = outlook.CreateItem(0)
        mail.SendUsingAccount = conta  # Definir a conta correta para envio
        mail.To = email
        mail.CC = "chefia@exemplo.com"  # E-mail da chefia (adicionar no CC)
        mail.Subject = assunto_email  # Aplicar o assunto corretamente
        mail.Body = mensagem  

        # Exibir o e-mail antes de enviar para depura√ß√£o
        mail.Display()  # Abrir o e-mail para depura√ß√£o
        
        # Enviar o e-mail (remova ou comente se quiser apenas visualizar o e-mail)
        # mail.Send()  
        print(f"‚úÖ E-mail preparado para {email} com o assunto: {mail.Subject}")
    except Exception as e:
        print(f"‚ùå ERRO ao enviar e-mail para {email}: {e}")
    
    # üìå Atualizar o hist√≥rico de notifica√ß√µes
    historico_df = historico_df[historico_df["Email"] != email]
    historico_df = pd.concat([historico_df, pd.DataFrame([{
        "Nome": nome,
        "Email": email,
        "Notificacoes": num_notificacoes,
        "Ultimas Datas": ', '.join(datas)
    }])], ignore_index=True)

# üíæ Salvar o hist√≥rico atualizado
historico_df.to_excel(historico_notificacoes, index=False, engine="openpyxl")
print("‚úÖ Notifica√ß√µes enviadas e hist√≥rico atualizado!")
